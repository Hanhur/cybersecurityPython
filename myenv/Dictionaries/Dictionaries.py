# =======================================================================================================
# В Python словари (dict) представляют собой неупорядоченные
# коллекции данных, где каждый элемент состоит из пары ключ­-значение. 
# Словари предоставляют эффективный способ хране­ния данных и доступа к ним по ключам. 
# Ключи словаря должны быть уникальными и неизменяемыми объектами, такими как строки, числа или кортежи. 
# В то же время значения в словаре могут быть любого типа данных, включая другие словари.
# =======================================================================================================

# ====================================== Примеры словарей в Python ======================================
# Создание
my_dict = {'name': 'John', 'age': 30, 'city': 'New York'} # Словарь с тремя парами ключ-значение
empty_dict = {} # Пустой словарь

# Словари в Python создаются с использованием фигурных скобок {}, 
# и элементы словаря записываются в формате {ключ: значение}, разделённые запятыми. 
# Доступ к значениям в словаре осуществляется по ключу. 
# Если вам когда-нибудь покажется, что словарь слишком сложный, просто помните: в жизни всё просто, если знать, где искать!

# Вывод
print(my_dict['name']) # Выводит 'John'
print(my_dict['age']) # Выводит 30

# Словари в Python обеспечивают быстрый доступ к данным по ключу, что делает их полезными для решения множества задач, 
# таких как хранение конфигураций, работа с данными JSON, кэширование результатов и многое другое.

# Добавление и обновление элементов
my_dict['email'] = 'john@example.com' # Добавляет новый ключ­ значение
my_dict['age'] = 31 # Обновляет значение существующего ключа

# Также можно использовать метод up(tate() для добавления или обновле­ния нескольких элементов сразу:
my_dict.update({'phone': '123-456-7890', 'city': 'Los Angeles'})

# Метод рор() удаляет элемент по указанному ключу и возвращает его значение. 
# Если ключ не найден, можно указать значение по умолчанию, чтобы не получить ошибку.

# Удаление элементов
age = my_dict.pop('age')
print(age) # Выводит 31

# Метод popitem() удаляет и возвращает последнюю добавленную пару ключ-значение из словаря.
last_item = my_dict.popitem()
print(last_item) # Выводит последнюю добавленную пару, например ('phone', '123-456-7890')

# Метод del удаляет элемент из словаря по указанному ключу. 
# Если ключ отсутствует в словаре, будет вызвано исключение KeyError.
del my_dict['email']

# Оператор in используется для проверки наличия ключа в словаре. Он возвращает True, если ключ присутствует в словаре, и False, если нет:
# Проверка наличия ключа
if 'name' in my_dict:
    print('Name is present in the dictionary')

# Кэширование результатов
cache = {}
def fibonacci(n):
    if n in cache:
        return cache [n]
    if n == 0:
        value = 0
    elif n == 1:
        value = 1
    else:
        value = fibonacci (n - 1) + fibonacci(n - 2)
    cache[n] = value
    return value
print(fibonacci(10)) # Выводит 55

# ==============================================================================================================

# Создание словаря:
# Создаем словарь студентов и их оценок
students_grades = {
    "Иван Иванов": 4.5,
    "Мария Петрова": 5.0,
    "Алексей Сидоров": 3.8,
    "Елена Кузнецова": 4.2,
    "Дмитрий Смирнов": 4.9
}

# Выводим словарь
print("Словарь студентов и их оценок:")
for student, grade in students_grades.items():
    print(f"{student}: {grade}")

# Альтернативный вариант вывода всего словаря
print("\nВесь словарь целиком:")
print(students_grades)

# Альтернативная версия с пользовательским вводом:
# Создаем пустой словарь
students = {}

# Запрашиваем количество студентов
n = int(input("Введите количество студентов: "))

# Заполняем словарь данными
for i in range(n):
    name = input(f"Введите имя студента {i+1}: ")
    grade = float(input(f"Введите оценку для {name}: "))
    students[name] = grade

# Выводим результаты
print("\nСозданный словарь:")
for name, grade in students.items():
    print(f"{name}: {grade}")

# =============================================================================================================

# Доступ к значениям:
# Создаем словарь с информацией о студенте
student = {
    "имя": "Алексей",
    "фамилия": "Петров",
    "возраст": 20,
    "курс": 3,
    "средний балл": 4.7
}

# Выводим весь словарь для наглядности
print("Весь словарь:")
print(student)

# Запрашиваем ключ у пользователя
key = input("\nВведите ключ для поиска (имя, фамилия, возраст, курс, средний балл): ")

# Получаем значение по ключу и выводим результат
value = student.get(key)  # Используем метод get() для безопасного доступа

if value is not None:
    print(f"Значение для ключа '{key}': {value}")
else:
    print(f"Ключ '{key}' не найден в словаре")

# Альтернативная версия с более сложным словарем:
# Словарь с информацией о книгах
library = {
    "1984": {"автор": "Джордж Оруэлл", "год": 1949, "жанр": "антиутопия"},
    "Преступление и наказание": {"автор": "Фёдор Достоевский", "год": 1866, "жанр": "роман"},
    "Мастер и Маргарита": {"автор": "Михаил Булгаков", "год": 1967, "жанр": "роман"}
}

# Выводим доступные книги
print("Доступные книги:", ", ".join(library.keys()))

# Запрашиваем книгу и информацию о ней
book = input("\nВведите название книги: ")
info = input("Какую информацию вы хотите узнать? (автор/год/жанр): ")

# Получаем запрошенную информацию
book_data = library.get(book)
if book_data:
    result = book_data.get(info)
    if result:
        print(f"{info} книги '{book}': {result}")
    else:
        print(f"Информация '{info}' не найдена для этой книги")
else:
    print(f"Книга '{book}' не найдена в библиотеке")

# ==================================================================================================

# Добавление элементов:
# 1. Создаем пустой словарь
my_dict = {}

# 2. Добавляем элементы разными способами
my_dict["язык"] = "Python"         # Добавление через присваивание
my_dict.update({"версия": "3.10"}) # Добавление через метод update()
my_dict.update(тип = "интерпретируемый", популярность = "высокая") # Еще вариант update()

# 3. Выводим результат
print("Обновленный словарь:")
for key, value in my_dict.items():
    print(f"{key}: {value}")

# 4. Альтернативный вывод всего словаря
print("\nСодержимое словаря целиком:")
print(my_dict)

# Версия с пользовательским вводом:
# Создаем пустой словарь
user_dict = {}

# Получаем количество элементов
n = int(input("Сколько элементов добавить в словарь? "))

# Добавляем элементы
for i in range(n):
    key = input(f"Введите ключ {i + 1}: ")
    value = input(f"Введите значение для '{key}': ")
    user_dict[key] = value  # Добавляем пару ключ-значение

# Выводим результат
print("\nВаш словарь:")
for k, v in user_dict.items():
    print(f"'{k}': '{v}'")

print(f"\nВсего элементов: {len(user_dict)}")

# =============================================================================================

# Изменение значений:
# 1. Создаем исходный словарь с информацией о продукте
product = {
    "название": "Смартфон",
    "бренд": "Xiaomi",
    "цена": 25000,
    "в наличии": True
}

# 2. Выводим исходный словарь
print("Исходный словарь:")
for key, value in product.items():
    print(f"{key}: {value}")

# 3. Изменяем значение по ключу "цена"
product["цена"] = 21990  # Изменяем цену на новую

# 4. Также изменим наличие товара
product["в наличии"] = False

# 5. Выводим обновленный словарь
print("\nОбновленный словарь:")
for key, value in product.items():
    print(f"{key}: {value}")

# 6. Альтернативный вывод всего словаря
print("\nСловарь целиком:")
print(product)

# Версия с пользовательским вводом:
# Создаем базовый словарь с городами
cities = {
    "Москва": {"население": 12_000_000, "страна": "Россия"},
    "Берлин": {"население": 3_600_000, "страна": "Германия"},
    "Токио": {"население": 14_000_000, "страна": "Япония"}
}

# Показываем доступные города
print("Доступные города:", ", ".join(cities.keys()))

# Запрашиваем город и параметр для изменения
city = input("\nВведите город для изменения: ")
if city in cities:
    print(f"Текущие данные по {city}: {cities[city]}")
    field = input("Какое поле изменить? (население/страна): ")
    if field in cities[city]:
        new_value = input(f"Введите новое значение для '{field}': ")
        # Изменяем значение
        cities[city][field] = new_value if field == "страна" else int(new_value)
        print(f"\nОбновленные данные по {city}: {cities[city]}")
    else:
        print("Ошибка: такого поля нет")
else:
    print("Ошибка: город не найден")

# Выводим весь обновленный словарь
print("\nОбновленная база городов:")
for city, info in cities.items():
    print(f"{city}: {info}")

# ===============================================================================================================

# Удаление элементов:
# Создаём словарь
my_dict = {
    "name": "Alice",
    "age": 25,
    "city": "New York",
    "country": "USA"
}

print("Исходный словарь:")
print(my_dict)

# Удаляем элемент по указанному ключу
key_to_remove = input("Введите ключ для удаления: ")

if key_to_remove in my_dict:
    del my_dict[key_to_remove]
    print(f"\nКлюч '{key_to_remove}' удалён.")
else:
    print(f"\nКлюч '{key_to_remove}' не найден в словаре.")

# Выводим обновлённый словарь
print("\nОбновлённый словарь:")
print(my_dict)

# Альтернативный вариант с использованием .pop():
if key_to_remove in my_dict:
    removed_value = my_dict.pop(key_to_remove)
    print(f"\nУдалён ключ '{key_to_remove}' со значением '{removed_value}'.")

# ==============================================================================================================

# Перебор элементов:
# Вариант 1: Использование цикла for с .items()
# Создаём словарь
my_dict = {
    "name": "Alice",
    "age": 25,
    "city": "New York",
    "country": "USA"
}

print("Пары ключ-значение в словаре:")
# Перебираем и выводим каждую пару
for key, value in my_dict.items():
    print(f"{key}: {value}")

# Вариант 2: Использование .keys() и обращение по ключу
# Создаём словарь
my_dict = {
    "name": "Alice",
    "age": 25,
    "city": "New York",
    "country": "USA"
}

print("Пары ключ-значение в словаре:")
# Перебираем ключи и получаем значения
for key in my_dict.keys():
    print(f"{key}: {my_dict[key]}")

# Вариант 3: Использование .values() (если нужны только значения)
print("Все значения словаря:")
for value in my_dict.values():
    print(value)

# Вариант 4: Через генератор списков (если нужно, например, сохранить пары в список)
pairs = [f"{k}: {v}" for k, v in my_dict.items()]
print("\n".join(pairs))

# ==================================================================================================================

# Проверка наличия ключа:
# Вариант 1: Использование оператора in
# Создаём словарь
my_dict = {
    "name": "Alice",
    "age": 25,
    "city": "New York",
    "country": "USA"
}

# Ввод ключа для проверки
key_to_check = input("Введите ключ для проверки: ")

# Проверяем наличие ключа и выводим результат
print(key_to_check in my_dict)

# Вариант 2: С проверкой через .get() (возвращает None, если ключа нет)
# Проверяем наличие ключа (безопасный способ)
key_exists = my_dict.get(key_to_check) is not None
print(key_exists)

# Вариант 3: Через try-except (если нужно выполнить дополнительный код при отсутствии ключа)
try:
    value = my_dict[key_to_check]
    print(True)  # Ключ существует
except KeyError:
    print(False)  # Ключа нет

# ==================================================================================================================

# Извлечение всех ключей:
# Создаём словарь
my_dict = {
    "name": "Anna",
    "age": 30,
    "city": "Moscow",
    "profession": "engineer"
}

# Получаем и выводим все ключи
keys_list = list(my_dict.keys())  # Преобразуем в список
print("Список всех ключей словаря:")
print(keys_list)

# Без преобразования в список (возвращается view-объект):
print("Ключи словаря:")
print(my_dict.keys())  # Выведет: dict_keys(['name', 'age', 'city', 'profession'])

# Через цикл (если нужно выводить по одному):
print("Ключи словаря:")
for key in my_dict:
    print(key)

# В одну строку (с использованием распаковки):
print(*my_dict.keys(), sep=', ')

# ====================================================================================================================

# Извлечение всех значений:
# Создаём словарь
my_dict = {
    "name": "Иван",
    "age": 35,
    "city": "Санкт-Петербург",
    "profession": "врач"
}

# Получаем и выводим все значения
values_list = list(my_dict.values())
print("Список всех значений словаря:")
print(values_list)

# Без преобразования в список (используя view-объект):
print("Значения словаря:")
print(my_dict.values())  # Выведет: dict_values(['Иван', 35, 'Санкт-Петербург', 'врач'])

# Через цикл (по одному значению):
print("Значения словаря:")
for value in my_dict.values():
    print(value)

# С использованием распаковки:
print(*my_dict.values(), sep=' | ')

# =========================================================================================================

# Копирование словаря:
# Создаём оригинальный словарь
original_dict = {
    "name": "Сергей",
    "age": 28,
    "city": "Казань",
    "hobbies": ["футбол", "чтение"]
}

# Создаём копию словаря
# Вариант 1: Через dict.copy() (поверхностная копия)
copied_dict = original_dict.copy()

# Вариант 2: Через конструктор dict() (поверхностная копия)
# copied_dict = dict(original_dict)

# Вариант 3: Глубокая копия (если есть вложенные изменяемые объекты)
# import copy
# copied_dict = copy.deepcopy(original_dict)

# Вносим изменение в копию, чтобы проверить работу
copied_dict["age"] = 30
copied_dict["hobbies"].append("программирование")

# Выводим оба словаря
print("Оригинальный словарь:")
print(original_dict)

print("\nКопия словаря:")
print(copied_dict)

# ======================================================================================================

# Объединение словарей:
# Исходные словари
dict1 = {'a': 1, 'b': 2}
dict2 = {'b': 3, 'c': 4}

# Способ 1: Объединение с обновлением (dict2 перезаписывает значения dict1)
merged_dict = dict1.copy()
merged_dict.update(dict2)
print("Способ 1 (update):", merged_dict)

# Способ 2: Через оператор | (Python 3.9+)
merged_dict = dict1 | dict2
print("Способ 2 (оператор |):", merged_dict)

# Способ 3: Через распаковку {**dict1, **dict2} (Python 3.5+)
merged_dict = {**dict1, **dict2}
print("Способ 3 (распаковка):", merged_dict)

# Способ 4: С сохранением значений обоих словарей для общих ключей
from collections import defaultdict

merged_dict = defaultdict(list)
for key in dict1.keys() | dict2.keys():
    if key in dict1: merged_dict[key].append(dict1[key])
    if key in dict2: merged_dict[key].append(dict2[key])
    
print("Способ 4 (сохраняем все значения):", dict(merged_dict))

# ========================================================================================================

# Вложенные словари:
# Создаём вложенный словарь (словарь сотрудников)
employees = {
    "Иван": {
        "должность": "разработчик",
        "возраст": 28,
        "навыки": ["Python", "SQL", "Django"]
    },
    "Мария": {
        "должность": "аналитик",
        "возраст": 32,
        "навыки": ["Excel", "Tableau", "SQL"]
    },
    "Алексей": {
        "должность": "менеджер",
        "возраст": 35,
        "навыки": ["управление", "планирование", "Scrum"]
    }
}

# Выводим весь вложенный словарь
print("Весь вложенный словарь:")
print(employees)

# Красивое форматирование вывода с отступами
print("\nКрасивый вывод с форматированием:")
for name, info in employees.items():
    print(f"\nСотрудник: {name}")
    for key, value in info.items():
        print(f"  {key}: {value}")

# ==========================================================================================================

# Сортировка словаря по ключам:
# Создаём исходный словарь (неупорядоченный)
my_dict = {
    "яблоко": 50,
    "апельсин": 30,
    "банан": 20,
    "груша": 40,
    "киви": 60
}

# Сортируем словарь по ключам
sorted_dict = dict(sorted(my_dict.items()))

# Выводим результат
print("Отсортированный словарь по ключам:")
for key, value in sorted_dict.items():
    print(f"{key}: {value}")

# Сортировка в обратном порядке:
sorted_dict = dict(sorted(my_dict.items(), reverse = True))

# Сортировка по длине ключа:
sorted_dict = dict(sorted(my_dict.items(), key = lambda item: len(item[0])))

# Сортировка без учёта регистра:
sorted_dict = dict(sorted(my_dict.items(), key = lambda item: item[0].lower()))

# Сохранение порядка в Python 3.7+ (словари сохраняют порядок вставки):
# Начиная с Python 3.7 обычные словари сохраняют порядок
sorted_dict = {}
for key in sorted(my_dict):
    sorted_dict[key] = my_dict[key]

# =======================================================================================================

# Словарь с несколькими типами данных:
# Создаём словарь с разными типами данных
mixed_dict = {
    "имя": "Алексей",          # строка
    "возраст": 35,             # целое число
    "рост": 1.85,              # число с плавающей точкой
    "студент": False,          # булево значение
    "курсы": ["Python", "Анализ данных", "Машинное обучение"],  # список
    "контакты": {              # вложенный словарь
        "email": "alex@example.com",
        "телефон": "+79161234567"
    },
    "дата_регистрации": None,  # NoneType
    "оценки": (4, 5, 5, 4)     # кортеж
}

# Выводим словарь с информацией о типах данных
print("Словарь с разными типами данных:\n")
for key, value in mixed_dict.items():
    print(f"{key}: {value} (тип: {type(value).__name__})")

# Альтернативный вывод с форматированием
import pprint
print("\nКрасивый вывод с помощью pprint:")
pprint.pprint(mixed_dict, width = 40, indent = 2, sort_dicts = False)

# ==========================================================================================================

# Подсчет элементов:
# Создаём словарь
my_dict = {
    "имя": "Анна",
    "возраст": 28,
    "город": "Москва",
    "профессия": "дизайнер",
    "хобби": ["рисование", "фотография"]
}

# Подсчитываем количество элементов
count = len(my_dict)

# Выводим результат
print(f"Словарь содержит {count} элементов:")
print(my_dict)

# С проверкой пустого словаря:
if not my_dict:
    print("Словарь пуст")
else:
    print(f"В словаре {len(my_dict)} элементов")

# С подробным выводом содержимого:
print(f"Количество элементов: {len(my_dict)}")
print("Содержимое словаря:")
for i, (key, value) in enumerate(my_dict.items(), 1):
    print(f"{i}. {key}: {value}")

# Для вложенных словарей (подсчёт всех элементов рекурсивно):
def count_dict_items(d):
    count = len(d)
    for value in d.values():
        if isinstance(value, dict):
            count += count_dict_items(value)
    return count

print(f"Общее количество элементов (с учётом вложенных): {count_dict_items(my_dict)}")

# ========================================================================================================

# Преобразование двух списков в словарь:
# Исходные списки
keys = ['имя', 'возраст', 'город', 'профессия']
values = ['Алексей', 32, 'Казань', 'инженер']

# Преобразуем списки в словарь
result_dict = dict(zip(keys, values))

# Выводим результат
print("Полученный словарь:")
print(result_dict)

# С проверкой длины списков:
if len(keys) != len(values):
    print("Ошибка: списки разной длины!")
else:
    result_dict = dict(zip(keys, values))
    print(result_dict)

# С использованием генератора словаря:
result_dict = {keys[i]: values[i] for i in range(len(keys))}

# Для обработки дубликатов ключей (сохранение последнего значения):
keys = ['a', 'b', 'a', 'c']
values = [1, 2, 3, 4]
result_dict = dict(zip(keys, values))
# Выведет {'a': 3, 'b': 2, 'c': 4}

# ==========================================================================================================

# Использование метода setdefault():
# Вот программа, демонстрирующая использование метода setdefault() для работы со словарём:
# Создаём словарь с данными о студентах
students = {
    "Иван": {"математика": 5, "физика": 4},
    "Мария": {"литература": 5, "химия": 3}
}

# Пример 1: Ключ существует
ivan_physics = students.setdefault("Иван", {}).setdefault("физика", "нет оценки")
print(f"Оценка Ивана по физике: {ivan_physics}")  # Выведет существующую оценку

# Пример 2: Ключ не существует (добавится значение по умолчанию)
alex_math = students.setdefault("Алексей", {}).setdefault("математика", "нет оценки")
print(f"Оценка Алексея по математике: {alex_math}")

# Пример 3: Добавление нового студента с предметом
students.setdefault("Ольга", {}).setdefault("биология", 5)

# Выводим обновлённый словарь
print("\nОбновлённый словарь студентов:")
for student, subjects in students.items():
    print(f"{student}: {subjects}")

# Без setdefault() аналогичный код выглядел бы так:
if "Алексей" not in students:
    students["Алексей"] = {}
if "математика" not in students["Алексей"]:
    students["Алексей"]["математика"] = "нет оценки"

# ===========================================================================================================

# Удаление всех элементов:
# Создаём исходный словарь
my_dict = {
    "имя": "Ольга",
    "возраст": 27,
    "город": "Новосибирск",
    "профессия": "врач"
}

print("Исходный словарь:")
print(my_dict)

# Способ 1: Метод clear()
my_dict.clear()
print("\nПосле clear():")
print(my_dict)

# Восстанавливаем словарь
my_dict = {
    "язык": "Python",
    "версия": 3.9,
    "уровень": "продвинутый"
}

# Способ 2: Пересоздание (присваивание пустого словаря)
my_dict = {}
print("\nПосле присваивания {}:")
print(my_dict)

# Проверка на пустоту
if not my_dict:
    print("\nСловарь успешно очищен и теперь пуст")
else:
    print("\nОшибка: словарь не пуст!")