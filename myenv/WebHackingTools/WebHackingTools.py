# ======================================================== Сканеры уязвимостей ====================================================
# OWASP ZAP (Zed Attack Proxy)
    # Описание: бесплатный и открытый исходный код сканер уязвимо­стей, разработанный специально для веб-приложений.
    # Функционал: автоматическое и ручное сканирование, перехват и модификация НТТР-трафика, анализ уязвимостей, 
    # включая SQL­-инъекции, XSS, CSRF и другие.
    # Преимущества: поддержка различных плагинов и расширений, ак­тивное сообщество, удобный интерфейс.

# Nessus
    # Описание: популярное коммерческое решение для сканирования се­тей и веб-приложений на наличие уязвимостей.
    # Функционал: глубокий анализ безопасности, широкий набор функ­ций для сканирования сетей и веб-приложений, 
    # поддержка различных типов анализа безопасности.
    # Преимущества: высокая точность обнаружения уязвимостей, регу­лярные обновления, поддержка множества протоколов и технологий.

# ==================================================== Прокси-инструменты ===========================================================
# Burp Suite
    # Описание: мощный набор инструментов для тестирования безопас­ности веб-приложений.
    # Функционал: прокси-сервер для перехвата и изменения НТТР­-трафика, сканер уязвимостей, повторитель запросов, декодер, 
    # инъек­тор и множество других инструментов.
    # Преимущества: интуитивно понятный интерфейс, возможность авто­матизации, поддержка множества расширений.

# Fiddler
    # Описание: бесплатный инструмент для отладки и анализа НТТР­-трафика.
    # Функционал: перехват и модификация запросов и ответов между клиентом и сервером, анализ и отладка НТТР и HTTPS трафика.
    # Преимущества: простота использования, поддержка всех основных браузеров и платформ.

# ==================================================== Инструменты для взлома паролей =================================================
# Hydra
    # Описание: инструмент для взлома паролей, поддерживающий раз­личные протоколы, включая НТТР POST, НТТР GET, FTP, SSH и мно­гие другие.
    # Функционал: брутфорс атаки на различные сервисы и протоколы, поддержка словарных атак.
    # Преимущества: высокая скорость, гибкость в настройке, поддержка множества протоколов.

# John the Ripper
    # Описание: один из наиболее известных инструментов для взлома па­ролей.
    # Функционал: подцержка множества алгоритмов хеширования и фор­матов хранения паролей, возможность использовать словари и прави­ла для атаки.
    # Преимущества: высокая эффективность, возможность распределен­ной обработки, подцержка множества форматов.

# ============================================== Инструменты для анализа и извлечения информации ======================================
# Scrapy
    # Описание: мощный фреймворк на Python для извлечения данных из веб-сайтов.
    # Функционал: создание веб-скраперов для извлечения информации из НТМL-страниц, подцержка различных форматов вывода данных (JSON, CSV, ХМL).
    # Преимущества: гибкость, возможность параллельного выполнения задач, подцержка множества форматов вывода.

# Wfuzz
    # Описание: инструмент для тестирования на проникновение, исполь­зуемый для автоматизации атак на веб-приложения.
    # Функционал: поиск скрытых ресурсов, словарные атаки, тестирова­ние форм, анализ НТТР ответов.
    # Преимущества: высокая гибкость, возможность настройки множе­ства параметров, подцержка различных видов атак.

# Практические примеры использования инструментов

# OWASP ZAP
# Пример автоматизации сканирования уязвимостей с использованием ZAP API
import requests

zap_url = 'http://localhost:8080'
target_url = 'http://example.com'

# Запуск сканирования
scan_response = requests.get(f'{zap_url}/JSON/ascan/action/scan/', params = {'url': target_url})
scan_id = scan_response.json() ['scan']

# Получение результатов сканирования
scan_results = requests.get(f'{zap_url}/JSON/ascan/view/scanProgress/', params = {'scanld': scan_id})
print(scan_results.json())

# Scrapy
# Пример создания веб-скрапера на Scrapy
import scrapy

class QuotesSpider(scrapy.Spider):
    name = "quotes"
    start_urls = [
        'http://quotes.toscrape.com/page/l/',
    ]
    def parse(self, response):
        for quote in response.css('div.quote'):
            yield {
                'text': quote.css('span.text::text').get(),
                'author': quote.css('small.author::text').get(),
                'tags': quote.css('div.tags a.tag::text').getall(),
            }
        next_page = response.css('li.next а::attr(href)'). get()
        if next_page is not None:
            yield response.follow(next_page, self.parse)

# ======================================================================================================================================

# Установка и настройка OWASP ZAP:
# SQL-инъекция
# Проблема:
# SELECT * FROM users WHERE id = '1' OR '1'='1';

# Решение:
# Используйте подготовленные запросы (Prepared Statements) в коде:
# $stmt = $pdo->prepare("SELECT * FROM users WHERE id = ?");
# $stmt->execute([$input_id]);