# ========================================================================================================
# Кортежи (tuple) в Python похожи на списки, но являются неизме­няемыми (immutable) коллекциями элементов. 
# Это означает, что один раз созданный кортеж не может быть изменен путем добав­ления, 
# удаления или изменения элементов после его создания.
# Кортежи обычно используются для хранения неизменяемых на­боров данных.
# ========================================================================================================

# ========================================== Примеры создания кортежей ===================================
# Кортежи в Python создаются с помощью круглых скобок (), а их элементы
# разделяются запятыми. Даже если кортеж состоит из одного элемента, он все
# равно должен быть заключен в круглые скобки и сопровождаться запятой.

# Создания кортежей
my_tuple = (1, 2, 3) # Кортеж из трех элементов
single_tuple = (4,) # Кортеж из одного элемента

# Доступ к элементам кортежа осуществляется с использованием индексации, как и в списках. Индексация начинается с нуля.
# Доступ к элементам кортежа
my_tuple = ('apple', 'banana', 'orange')
print(my_tuple[0]) # Выводит 'apple'
print(my_tuple[1]) # Выводит 'banana'

# Оператор + используется для объединения двух кортежей в один.
# Конкатенация кортежей
tuple1 = (1, 2, 3)
tuple2 = (4, 5, 6)
combined_tuple = tuple1 + tuple2
print(combined_tuple) # Выводит (1, 2, 3, 4, 5, 6)

# С помощью срезов можно извлекать подмножества элементов из кортежа.
# Операции срезов
my_tuple = ('apple', 'banana', 'orange', 'grape', 'pear')
sub_tuple = my_tuple[1:4]
print(sub_tuple) # Выводит ('banana', 'orange', 'grape')

# Функция len() возвращает количество элементов в кортеже.
# Определение длины кортежа
my_tuple = (1, 2, 3, 4, 5)
length = len(my_tuple)
print(length) # Выводит 5

# Кортежи можно преобразовывать в списки и обратно, используя функции list() и tuple().
# Преобразование списков в кортежи и наоборот
my_list = [1, 2, 3]
my_tuple = tuple(my_list)
print(my_tuple) # Выводит (1,.2, 3)

new_list = list(my_tuple)
print(new_list) # Выводит (1, 2, 3]

# Кортежи идеально подходят для хранения координат точек в простран­стве, которые не должны изменяться.
# Хранение координат
coordinates = (10.0, 20.0)
print(coordinates) # Выводит (10.0, 20.0)

# Кортежи можно использовать для передачи неизменяемых данных в функции.
# Передача неизменяемых данных в функции
def print_coordinates(coords):
    print(f"X: {coords[0]}, Y: {coords[1]}")

point = (5, 10)
print_coordinates(point) # Выводит "Х: 5, У: 10"

# ==========================================================================================================================

# Создание кортежа:
# Создаем кортеж из 5 элементов
my_tuple = (10, "Python", 3.14, True, [1, 2, 3])

# Выводим кортеж
print("Созданный кортеж:", my_tuple)

# Демонстрируем особенности кортежей
print("\nОсобенности кортежа:")
print("1. Доступ по индексу (второй элемент):", my_tuple[1])
print("2. Срез кортежа (первые 3 элемента):", my_tuple[:3])
print("3. Длина кортежа:", len(my_tuple))
print("4. Попытка изменить элемент (вызовет ошибку):")

try:
    my_tuple[0] = 100  # Кортежи неизменяемы
except TypeError as e:
    print(f"   Ошибка: {e}")

# Дополнительные способы создания кортежей:
# Создание без скобок
simple_tuple = 1, 2, 3
print(simple_tuple)  # (1, 2, 3)

# Создание кортежа из одного элемента (нужна запятая)
single_tuple = (42,)
print(single_tuple)  # (42,)

# Преобразование списка в кортеж
list_to_tuple = tuple([1, 2, 3])
print(list_to_tuple)  # (1, 2, 3)

# ==========================================================================================================

# Доступ к элементам:
# Создаем кортеж с разными типами данных
my_tuple = ("Python", 3.14, 2023, [1, 2, 3], True)

# Выводим весь кортеж
print("Весь кортеж:", my_tuple)

# Получаем и выводим первый элемент (индекс 0)
print("\nПервый элемент кортежа:", my_tuple[0])

# Получаем и выводим последний элемент (индекс -1)
print("Последний элемент кортежа:", my_tuple[-1])

# Дополнительные примеры доступа к элементам
print("\nДругие элементы:")
print("Второй элемент (индекс 1):", my_tuple[1])
print("Предпоследний элемент (индекс -2):", my_tuple[-2])

# Дополнительный пример с вложенными структурами:
nested_tuple = (("a", "b", "c"), [1, 2, 3], {"name": "John", "age": 30})

print("\nПример с вложенным кортежем:")
print("Первый элемент первого вложенного кортежа:", nested_tuple[0][0])
print("Последний элемент вложенного списка:", nested_tuple[1][-1])
print("Значение по ключу 'name' из вложенного словаря:", nested_tuple[2]["name"])

# ===============================================================================================================

# Изменение кортежа:
# Создаем кортеж
my_tuple = (10, 20, 30, 40, 50)
print("Исходный кортеж:", my_tuple)

# Попытка изменить элемент кортежа
try:
    print("\nПопытка изменить второй элемент (индекс 1) с 20 на 99...")
    my_tuple[1] = 99  # Эта строка вызовет ошибку
except TypeError as error:
    print(f"Ошибка: {error}")
    print("Кортежи не поддерживают изменение элементов!")

# Альтернативные решения:
print("\nКак можно 'изменить' кортеж:")
# 1. Создание нового кортежа на основе старого
new_tuple = my_tuple[:1] + (99,) + my_tuple[2:]
print("1. Создать новый кортеж с изменением:", new_tuple)

# 2. Преобразование в список, изменение и обратно
temp_list = list(my_tuple)
temp_list[1] = 99
modified_tuple = tuple(temp_list)
print("2. Через преобразование в список:", modified_tuple)

# Что действительно можно делать с кортежами:
print("\nЧто можно делать с кортежами:")
print("Доступ по индексу:", my_tuple[0])
print("Срезы:", my_tuple[1:4])
print("Длина кортежа:", len(my_tuple))
print("Конкатенация:", my_tuple + (60, 70))
print("Повторение:", my_tuple * 2)

# ===================================================================================================

# Объединение кортежей:
# Создаем два кортежа
tuple1 = (1, 2, 3)
tuple2 = ('a', 'b', 'c')

# Выводим исходные кортежи
print("Первый кортеж:", tuple1)
print("Второй кортеж:", tuple2)

# Объединяем кортежи с помощью оператора +
merged_tuple = tuple1 + tuple2

# Выводим результат
print("\nРезультат объединения:")
print("Объединенный кортеж:", merged_tuple)

# Дополнительные примеры работы с кортежами
print("\nДополнительные операции:")
# Объединение с пустым кортежем
empty_tuple = ()
print("Объединение с пустым кортежем:", merged_tuple + empty_tuple)

# Многократное объединение
print("Повторное объединение:", tuple1 * 2 + tuple2 * 3)

# Объединение вложенных кортежей
nested_tuple1 = ((1, 2), (3, 4))
nested_tuple2 = (('a', 'b'), ('c', 'd'))
print("Объединение вложенных кортежей:", nested_tuple1 + nested_tuple2)

# Альтернативные способы объединения:
# С помощью tuple() и sum()
combined = sum((tuple1, tuple2), ())
# С помощью распаковки
combined = (*tuple1, *tuple2)

# ===========================================================================================================

# Повторение кортежа:
# Создаем исходный кортеж
original_tuple = (1, "Python", 3.14)

# Выводим исходный кортеж
print("Исходный кортеж:", original_tuple)

# Повторяем кортеж три раза
repeated_tuple = original_tuple * 3

# Выводим результат
print("\nКортеж, повторенный три раза:")
print(repeated_tuple)

# Демонстрация особенностей
print("\nОсобенности повторения кортежей:")
print("1. Повторение пустого кортежа:", () * 3)
print("2. Повторение кортежа с одним элементом:", (42,) * 3)
print("3. Повторение вложенных структур:", (([1, 2], "a"),) * 2)

# Дополнительный пример:
# Пример с пользовательским вводом
user_input = input("Введите элементы кортежа через пробел: ").split()
user_tuple = tuple(user_input)
print("Ваш кортеж x3:", user_tuple * 3)

# ======================================================================================================

# Извлечение среза:
# Создаем кортеж с различными элементами
my_tuple = (10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
print("Исходный кортеж:", my_tuple)

# Извлекаем элементы со 2-го по 4-й (индексы 1-3)
slice_1 = my_tuple[1:4]
print("\nСрез [1:4] (со 2-го по 4-й элемент):", slice_1)

# Другие варианты срезов
print("\nДругие примеры срезов:")
print("1. Первые 5 элементов:", my_tuple[:5])
print("2. Элементы с 5-го до конца:", my_tuple[4:])
print("3. Каждый второй элемент:", my_tuple[::2])
print("4. Обратный порядок элементов:", my_tuple[::-1])
print("5. Срез с шагом 3:", my_tuple[1:8:3])

# Особый случай - срез всего кортежа
print("\nСрез всего кортежа создает копию:", my_tuple[:])

# ==========================================================================================================

# Преобразование кортежа в список:
# Исходный кортеж
original_tuple = (1, 2, 3, 4, 5)
print("Исходный кортеж:", original_tuple)
print("Тип исходного кортежа:", type(original_tuple))

# Преобразование кортежа в список
temp_list = list(original_tuple)
print("\nПреобразованный в список кортеж:", temp_list)
print("Тип после преобразования в список:", type(temp_list))

# Внесение изменений в список
temp_list.append(6)          # Добавляем элемент
temp_list[1] = 20            # Изменяем элемент
temp_list.remove(4)          # Удаляем элемент
print("\nСписок после изменений:", temp_list)

# Преобразование списка обратно в кортеж
modified_tuple = tuple(temp_list)
print("\nКортеж после обратного преобразования:", modified_tuple)
print("Тип после обратного преобразования:", type(modified_tuple))

# ===========================================================================================================

# Поиск элемента:
# Пример готового кортежа (можно заменить на ввод от пользователя)
my_tuple = (10, 20, 30, 'apple', 'banana', 3.14)

# Получаем элемент для поиска от пользователя
element = input("Введите элемент для поиска: ")

# Пытаемся преобразовать ввод в число, если это возможно
try:
    if '.' in element:
        element = float(element)
    else:
        element = int(element)
except ValueError:
    pass  # Оставляем как строку, если преобразование не удалось

# Проверяем наличие элемента в кортеже
result = element in my_tuple

# Выводим результат
print(f"Элемент {element} содержится в кортеже: {result}")

# Альтернативная версия с вводом кортежа от пользователя:
# Получаем кортеж от пользователя
input_str = input("Введите элементы кортежа через запятую: ")
items = [item.strip() for item in input_str.split(',')]

# Преобразуем элементы в числа, где это возможно
processed_items = []
for item in items:
    try:
        if '.' in item:
            processed_items.append(float(item))
        else:
            processed_items.append(int(item))
    except ValueError:
        processed_items.append(item)

my_tuple = tuple(processed_items)

# Получаем элемент для поиска
search_element = input("Введите элемент для поиска: ")

# Пытаемся преобразовать элемент поиска
try:
    if '.' in search_element:
        search_element = float(search_element)
    else:
        search_element = int(search_element)
except ValueError:
    pass

# Проверяем наличие элемента
found = search_element in my_tuple

print(f"Кортеж: {my_tuple}")
print(f"Элемент '{search_element}' найден: {found}")

# =============================================================================================

# Нахождение длины:
# Создаем кортеж
my_tuple = (1, 2, 3, 'яблоко', 'банан', True, 3.14)

# Выводим кортеж и его длину
print("Созданный кортеж:", my_tuple)
print("Длина кортежа (количество элементов):", len(my_tuple))

# Альтернативная версия с пользовательским вводом:
# Если нужно, чтобы пользователь сам вводил элементы кортежа:
# Получаем элементы кортежа от пользователя
input_str = input("Введите элементы кортежа через запятую: ")

# Создаем кортеж из введенных данных
my_tuple = tuple(item.strip() for item in input_str.split(','))

# Выводим результат
print("\nСозданный кортеж:", my_tuple)
print("Длина кортежа (количество элементов):", len(my_tuple))

# ===============================================================================================

# Перебор элементов:
# Создаем кортеж
my_tuple = (10, 20, 30, 'яблоко', 'банан', 3.14, True)

# Выводим элементы кортежа по одному
print("Элементы кортежа:")
for item in my_tuple:
    print(item)

# Альтернативная версия с нумерацией элементов:
# Создаем кортеж
fruits = ('яблоко', 'апельсин', 'банан', 'киви')

# Выводим элементы с их индексами
print("Элементы кортежа с индексами:")
for index, fruit in enumerate(fruits):
    print(f"Элемент {index}: {fruit}")

# Версия с пользовательским вводом:
# Получаем кортеж от пользователя
input_str = input("Введите элементы кортежа через запятую: ")
user_tuple = tuple(item.strip() for item in input_str.split(','))

# Выводим элементы
print("\nЭлементы кортежа:")
for element in user_tuple:
    print(element)

# ========================================================================================

# Максимум и минимум:
# Создаем кортеж чисел
numbers = (15, 22, 8, 34, 7, 42, 19, 3, 25)

# Находим максимальное и минимальное значения
max_value = max(numbers)
min_value = min(numbers)

# Выводим результаты
print(f"Кортеж чисел: {numbers}")
print(f"Максимальное значение: {max_value}")
print(f"Минимальное значение: {min_value}")

# Альтернативная версия с пользовательским вводом:
# Получаем числа от пользователя
input_str = input("Введите числа через запятую: ")

# Создаем кортеж чисел (преобразуем строки в числа)
try:
    numbers = tuple(float(num) if '.' in num else int(num) 
    for num in (x.strip() for x in input_str.split(',')))
except ValueError:
    print("Ошибка: пожалуйста, вводите только числа!")
    exit()

# Находим и выводим результаты
if numbers:
    print(f"\nКортеж чисел: {numbers}")
    print(f"Максимальное значение: {max(numbers)}")
    print(f"Минимальное значение: {min(numbers)}")
else:
    print("Кортеж пуст")

# ====================================================================================

# Сортировка кортежа:
# Исходный кортеж чисел
numbers_tuple = (34, 12, 8, 56, 23, 42, 5, 19)

# 1. Преобразуем кортеж в список
numbers_list = list(numbers_tuple)

# 2. Сортируем список
numbers_list.sort()

# 3. Преобразуем отсортированный список обратно в кортеж
sorted_tuple = tuple(numbers_list)

# Выводим результаты
print("Исходный кортеж:", numbers_tuple)
print("Отсортированный кортеж:", sorted_tuple)

# Альтернативная версия с пользовательским вводом:
# Получаем числа от пользователя
input_str = input("Введите числа через запятую: ")

# Преобразуем в кортеж чисел
try:
    original_tuple = tuple(
        float(num) if '.' in num else int(num)
        for num in (x.strip() for x in input_str.split(','))
    )
except ValueError:
    print("Ошибка: вводите только числа!")
    exit()

# Сортируем (через преобразование в список и обратно)
sorted_tuple = tuple(sorted(original_tuple))

# Выводим результаты
print("\nИсходный кортеж:", original_tuple)
print("Отсортированный кортеж:", sorted_tuple)

# ===========================================================================================

# Кортеж с одним элементом:
# Создаем кортеж с одним элементом (обратите внимание на запятую)
single_element_tuple = (42,)  # Запятая после элемента обязательна!

# Выводим кортеж и его тип
print("Содержимое:", single_element_tuple)
print("Тип данных:", type(single_element_tuple))

# Для сравнения - что будет без запятой
not_a_tuple = (42)
print("\nДля сравнения - без запятой:")
print("Содержимое:", not_a_tuple)
print("Тип данных:", type(not_a_tuple))

# Альтернативная версия с пользовательским вводом:
# Получаем элемент от пользователя
element = input("Введите один элемент для кортежа: ")

# Создаем кортеж с одним элементом
try:
    # Пытаемся преобразовать в число
    num = float(element) if '.' in element else int(element)
    user_tuple = (num,)
except ValueError:
    # Если не число, оставляем как строку
    user_tuple = (element,)

# Выводим результат
print("\nСозданный кортеж:", user_tuple)
print("Тип данных:", type(user_tuple))
print("Длина кортежа:", len(user_tuple))

# ===================================================================================================

# Преобразование строки в кортеж:
# Получаем строку от пользователя
user_string = input("Введите строку: ")

# Преобразуем строку в кортеж символов
char_tuple = tuple(user_string)

# Выводим результаты
print("\nИсходная строка:", user_string)
print("Тип исходной строки:", type(user_string))
print("\nПолученный кортеж:", char_tuple)
print("Тип кортежа:", type(char_tuple))
print("Длина кортежа:", len(char_tuple))

# Демонстрация доступа к элементам
print("\nПервый символ:", char_tuple[0])
print("Последний символ:", char_tuple[-1])

# ====================================================================================================

# Индексация и отрицательная индексация:
# Создаем кортеж для демонстрации
my_tuple = ('a', 'b', 'c', 'd', 'e', 'f', 'g')

print("Исходный кортеж:", my_tuple)
print("Длина кортежа:", len(my_tuple))
print("\nПоложительная индексация (от начала):")

# Положительная индексация (от 0 до len-1)
print("my_tuple[0] ->", my_tuple[0])   # Первый элемент
print("my_tuple[2] ->", my_tuple[2])   # Третий элемент
print("my_tuple[6] ->", my_tuple[6])   # Последний элемент (для кортежа длины 7)

print("\nОтрицательная индексация (с конца):")

# Отрицательная индексация (от -1 до -len)
print("my_tuple[-1] ->", my_tuple[-1])  # Последний элемент
print("my_tuple[-3] ->", my_tuple[-3])  # Третий элемент с конца
print("my_tuple[-7] ->", my_tuple[-7])  # Первый элемент (для кортежа длины 7)

# Граничные случаи
print("\nПопытка выйти за границы:")
try:
    print("my_tuple[7] ->", my_tuple[7])  # Выход за границы
except IndexError as e:
    print("Ошибка:", e)

try:
    print("my_tuple[-8] ->", my_tuple[-8]) # Выход за границы
except IndexError as e:
    print("Ошибка:", e)